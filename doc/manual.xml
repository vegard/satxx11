<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN" "file:///usr/share/xml/docbook/schema/dtd/4.5/docbookx.dtd">
<book>
	<title>SAT++11 Manual</title>
	<bookinfo>
		<author>
			<firstname>Vegard</firstname>
			<surname>Nossum</surname>
		</author>
		<affiliation>
			<address><email>vegardno@ifi.uio.no</email></address>
		</affiliation>
	</bookinfo>

<!--
	<preface>
		<title>Preface</title>

		<abstract>
			<simpara>ssdfsdf</simpara>
		</abstract>
	</preface>
-->

	<part>
		<title>Introduction</title>

		<chapter>
			<title>Overview</title>
			<para>This is the manual for the software program/project <application>SAT++11</application> (sometimes written <application>satxx11</application>). <application>SAT++11</application> aims to be a fast, scalable, and extensible parallel SAT solver. Efficient compile-time extensibility is one of the most important features of the code base, and we achieve it through creative use of C++ template metaprogramming. In fact, we rely on many of the features of the new C++ language standard, C++11, a fact which is reflected in the name of the solver.</para>
			<para>The first part of this manual (<xref linkend="usage" />) describes how to build the solver program and how to run it. The second part (<xref linkend="plugin-architecture" />) is a reference to the plugin architecture that allows one to write compile-time extensions for the solver, including a tutorial that explains the process of writing a plugin step by step. The last part (<xref linkend="builtins" />) is a reference to the built-in plugins that are bundled with the solver core.</para>
			<para>Although the solver was written from scratch, many algorithms, heuristics, and techniques were heavily inspired by (and sometimes copied from) their respective counterparts in other, already existing SAT solvers like Chaff, MiniSat, CryptoMiniSat, lingeling, and SAT4J. The main contribution of <application>SAT++11</application> is to bring the extensibility of SAT4J together with the raw efficiency of C++ solvers like MiniSat.</para>
		</chapter>
	</part>

	<part id="usage">
		<title>Usage</title>

		<chapter>
			<title>Building the solver</title>
			<para>Before <application>SAT++11</application> can be compiled, the following prerequisites must be installed:</para>
			<itemizedlist>
				<listitem><para>Boost.Program_options (<filename>libboost-program-options-dev</filename>)</para></listitem>
				<listitem><para>Git (<filename>git</filename>)</para></listitem>
				<listitem><para>GNU C++ Compiler (<filename>gcc</filename>)</para></listitem>
			</itemizedlist>
			<para>To compile the solver, simply run the following command in the top-level project directory:</para>
			<para><userinput>bash make.sh</userinput></para>
		</chapter>

		<chapter>
			<title>Building the documentation</title>
			<para>In order to build the documentation, the following prerequisites must be installed:</para>
			<itemizedlist>
				<listitem><para>Docbook (<filename>docbook</filename>, <filename>docbook-xsl</filename>)</para></listitem>
				<listitem><para>Doxygen (<filename>doxygen</filename>)</para></listitem>
				<listitem><para>Libxslt1.1 (<filename>libxslt1.1</filename>)</para></listitem>
				<listitem><para>xmlto (<filename>xmlto</filename>)</para></listitem>
			</itemizedlist>
			<para>To compile the API reference, run the following command in the top-level project directory:</para>
			<para><userinput>doxygen</userinput></para>
			<para>The generated files can be found in <filename>doc/html/</filename>.</para>
			<para>To compile the manual, run the following commands in the top-level project directory:</para>
			<para><userinput>cd doc &amp;&amp; bash make.sh</userinput></para>
			<para>The generated files can be found in <filename>doc/manual/</filename>.</para>
		</chapter>

		<chapter>
			<title>Running the solver</title>

			<section>
				<title>Command-line options</title>
				<warning><para>This list of options may not be complete or up to date. Please also check the output of <userinput>./solver --help</userinput> for additional options.</para></warning>
				<variablelist>
					<varlistentry><term><userinput>--keep-going</userinput></term><listitem><para>Find all solutions</para></listitem></varlistentry>
					<varlistentry><term><userinput>--threads arg</userinput></term><listitem><para>Number of threads (default: number of available cores)</para></listitem></varlistentry>
					<varlistentry><term><userinput>--seed arg</userinput></term><listitem><para>Random number generator seed (default: current time)</para></listitem></varlistentry>
				</variablelist>
			</section>

			<section>
				<title>Example</title>
				<para>To find all solutions to the input file <filename>~/sha1.cnf</filename> using 4 threads, run the command:</para>
				<para><userinput>./solver --keep-going --threads 4 ~/sha1.cnf</userinput></para>
			</section>
		</chapter>

		<chapter>
			<title>Input file format</title>
			<para>As the main rule, input files to the solver are given in the traditional DIMACS CNF format. In general, this is a line-oriented plaintext format, meaning that each line of input is parsed as a unit. At the beginning of the file, we may have any number of comment lines; these lines start with a <literal>c</literal>. Following the comments (if any), there comes exactly one problem line; this line starts with a <literal>p</literal> and two numeric parameters. The first parameter is the number of variables in the instance, and the second parameter is the number of clauses. After the problem line follows the clauses of the instance. Each clause is a space-separated list of literals ending in <literal>0</literal>. Negative literals consist of <literal>-</literal> followed by the variable number, while positive literals consist only of the variable number.</para>
			<para>Additionally, in the traditional DIMACS CNF format, variables are numbered from 1 to the number of variables, inclusive. However, we are not so strict with variable numbering. In fact, we are not strict at all. Comment lines may appear anywhere in the file, the problem line is entirely optional, and variables need not be numbered sequentially.</para>
			<example>
				<title>Example CNF file</title>
				<programlisting>c An example CNF file
p cnf 3 4
1 -2 0
-1 2 0
-2 3 0
1 2 3 0</programlisting>
			</example>
			<para>In the future, we might support additional types of constraints, e.g. parity constraints, cardinality constraints, or linear zero-one constraints.</para>
		</chapter>
	</part>

	<part id="plugin-architecture">
		<title>Plugin architecture</title>

		<chapter>
			<title>Overview</title>
			<para>The plugin architecture of <application>SAT++11</application> is what allows us to modify and extend the solver and its heuristics. In fact, more than that, even the very core of the solver, the propagation engine, is a plugin that can be replaced by another.</para>
			<para>Now, you may ask what the point of having a plugin architecture really is. Can't we just edit <filename>Solver.cpp</filename> like we used to do with <application>MiniSat</application>? Well, as it turns out, that is a perfect recipe for making a mess. And, although the plugin architecture seems rigid, it actually allows us to do a lot more with less work on the part of the programmer. Consider for example that you would like to test your hypothesis about a brand new decision variable heuristic. In the old way of doing things, you would have to have a look around and look at all the parts that might be affected by the old heuristic; in fact, if you wanted to keep the other heuristic around so that you could switch between the two, you would end up having to keep track of the functions and data structures for both.</para>
			<para>With the plugin architecture, creating a new decision variable heuristic is as simple as writing a new (template) class. The functions and data structures for the new plugin are entirely self-contained and there is no need to change any of the existing files. Moreover, if you don't want to use the old heuristic, you don't need to spend any time whatsoever on removing it. You simply have to pass your new heuristic to the solver instead of the old one.</para>
			<para>Separation of duties is a very powerful concept, because it allows us to completely ignore other, irrelevant parts of a program. Not only that, but SAT solvers are increasingly complex beasts, and we absolutely need to keep track of less things at a time in order to stay in charge of our own programs. If we don't, we can have no hope of making any progress, except perhaps by chance.</para>
			<para>Additionally, the plugin architecture of <application>SAT++11</application> is based on C++ templates, which means that there is absolutely zero runtime overhead compared with implementing everything in a single file or class. Since plugin selection happens at compile-time, there is no overhead from calling virtual functions (as, indeed, there are no virtual functions to begin with).</para>
			<para>Now, there are two types of plugins: designated plugins (<xref linkend="designated-plugins" />), and generic plugins (<xref linkend="generic-plugins" />). In short, designated plugins are plugins with a certain predefined (“designated”) purpose, like plugins that implement the decision literal heuristic or the restart policy. Generic plugins, however, don't fulfill a particular required purpose, but extend the core functionality of the solver in various ways. Generic plugins typically listen to certain events and can interact with the environment (such as e.g. the plugin responsible for printing statistics to the console), or they implement algorithms that run in-between the regular DPLL-style searches (such as e.g. simplification passes).</para>
		</chapter>

		<chapter id="designated-plugins">
			<title>Designated plugins</title>
			<para>Designated plugins are plugins with a certain predefined purpose. For the moment, the <literal>class solver</literal> takes the following types of designated plugins as its arguments:</para>
			<variablelist>
				<varlistentry><term>Random</term><listitem><para>Random number generator. Any of the standard C++11 random number generators (e.g. <literal>std::minstd_rand</literal>, <literal>std::ranlux24_base</literal>, or <literal>std::mt19937</literal>) will do.</para></listitem></varlistentry>
				<varlistentry><term>Decide</term><listitem><para>Decision literal heuristic.</para></listitem></varlistentry>
				<varlistentry><term>Propagate</term><listitem><para>Propagation engine.</para></listitem></varlistentry>
				<varlistentry><term>Analyze</term><listitem><para>Conflict analysis engine.</para></listitem></varlistentry>
				<varlistentry><term>Send</term><listitem><para>Outgoing-clause sharing heuristic.</para></listitem></varlistentry>
				<varlistentry><term>Receive</term><listitem><para>Incoming-clause acceptance heuristic.</para></listitem></varlistentry>
				<varlistentry><term>NextRestart</term><listitem><para>Restart policy.</para></listitem></varlistentry>
				<varlistentry><term>Reduce</term><listitem><para>Clause database reduction heuristic.</para></listitem></varlistentry>
				<varlistentry><term>Simplify</term><listitem><para>Simplification passes. More than one type of simplification pass can be used at a time using <literal>simplify_list&lt;&gt;</literal>.</para></listitem></varlistentry>
				<varlistentry><term>Plugin</term><listitem><para>Generic plugins. More than one generic plugin can be used at a time using <literal>plugin_list&lt;&gt;</literal>.</para></listitem></varlistentry>
			</variablelist>
			<example>
				<title>Example <literal>solver</literal> configuration</title>
				<programlisting>using namespace satxx11;

typedef solver&lt;ranlux24_base,
    decide_cached_polarity&lt;decide_vsids&lt;95&gt;&gt;,
    propagate_watchlists&lt;&gt;,
    analyze_1uip&lt;minimise_minisat&gt;,
    send_size&lt;4&gt;
    receive_all,
    restart_multiply&lt;restart_luby, restart_fixed&lt;400&gt;&gt;,
    reduce_size&lt;2&gt;
    simplify_failed_literal_probing,
    plugin_list&lt;plugin_stdio&gt;&gt; my_solver&gt;</programlisting>
			</example>
		</chapter>

		<chapter id="generic-plugins">
			<title>Generic plugins</title>
			<para>TODO</para>
		</chapter>

		<chapter>
			<title>Tutorial: Writing a plugin</title>

			<section>
				<title>Introduction</title>
				<para>In this chapter, you will learn how to write a plugin from scratch and use it with the standard solver. The plugin itself will be a decision variable heuristic based on two existing heuristics, but many of the techniques used for decision variable heuristic plugins will apply to other kinds of plugins as well.</para>
				<para>The particular heuristic that we will create is similar to the VSIDS heuristic, except that some predefined percentage of the decisions will be made at random. We can achieve this by <emphasis>reusing</emphasis> the two built-in decision heuristics <literal>decide_vsids</literal> and <literal>decide_random</literal> (without the use of copy/paste, of course!).</para>
			</section>

			<section>
				<title>Creating the class</title>
				<para>First of all, we will create a new file that contains all the code for our new heuristic. Let's call it <filename>my_decide.hh</filename> and place it in the top-level directory, i.e. alongside <filename>main.cc</filename>. This file needs to include the two built-in heuristics that we are reusing, and also declare and define our own class:</para>
				<programlisting>#ifndef MY_DECIDE_HH
#define MY_DECIDE_HH

#include &lt;satxx11/decide_random.hh&gt;
#include &lt;satxx11/decide_vsids.hh&gt;

using namespace satxx11;

class my_decide {
public:
};

#endif</programlisting>
				<para>This class will be instantiated once per thread just like all the other plugins. In order to actually use the two built-in heuristics, we have to instantiate them too. This we do by making them members of our new class.</para>
<programlisting>class my_decide {
public:
    decide_random random;
    decide_vsids&lt;95&gt; vsids;
};</programlisting>
				<para>However, decision variable heuristics (as most plugins) will need to know certain information about the solver and the instance as part of their initialisation. For example, the VSIDS heuristic allocates an array of doubles to hold the current activity value for each variable, so it needs to know how many variables there are in the instance. In order for the solver to provide all this information to plugins, it passes a reference to itself as the first argument to most of the plugin's functions and, in this case most importantly, to the constructor. Our constructor, therefore, simply needs to pass this argument on to the two plugins we are using:</para>
				<programlisting>template&lt;class Solver&gt;
my_decide(Solver &amp;s):
    random(s),
    vsids(s)
{
}</programlisting>
				<para>At first it may seem a little odd to make the solver type a template parameter, but you will soon get used to it. The reason we have to do this is that the solver class is itself a template class whose type depends on all the plugins it is using! In other words, the solver type depends on what plugins it is using, and we would like our plugin to be independent of the (other) plugins that the solver is using.</para>
			</section>
			<section>
				<title>Implementing the event handlers</title>
				<para>The event handlers are functions of the plugin we are writing, and the exact set of events that we need to handle depends on the type of plugin we are writing. For decision variable heuristics, we have to implement handlers for:</para>
				<itemizedlist>
					<listitem><para>Variable assignment and unassignment events; in order to possibly keep track of what variables are eligible for being picked as decision variables.</para></listitem>
					<listitem><para>Clause resolution events; in order to possibly bump variable activities (for VSIDS-like heuristics).</para></listitem>
					<listitem><para>Clause attachment and detachment events; in order to possibly keep track of what variables/literals occur the most frequently.</para></listitem>
					<listitem><para>Conflict events; in order to possibly decay the variable activities (for VSIDS-like heuristics).</para></listitem>
				</itemizedlist>
				<para>It doesn't matter that we don't need to know about certain events; empty functions will be completely optimised away by the compiler, since the compiler knows (at compile-time) exactly what functions will be called. This is one of the huge advantages of using a compile-time plugin architecture; there is absolutely no runtime overhead for calling empty event handlers.</para>
				<para>Our event handlers are going to forward the events to the two plugins we are using, just like we did for the constructor:</para>
				<programlisting>template&lt;class Solver&gt;
void assign(Solver &amp;s, unsigned int variable, bool value)
{
    random.assign(s, variable, value);
    vsids.assign(s, variable, value);
}

template&lt;class Solver&gt;
void unassign(Solver &amp;s, unsigned int variable)
{
    random.unassign(s, variable);
    vsids.unassign(s, variable);
}

template&lt;class Solver&gt;
void resolve(Solver &amp;s, literal lit)
{
    random.resolve(s, lit);
    vsids.resolve(s, lit);
}

template&lt;class Solver&gt;
void resolve(Solver &amp;s, const std::vector&lt;literal&gt; &amp;v)
{
    random.resolve(s, v);
    vsids.resolve(s, v);
}

void attach(clause c)
{
    random.attach(c);
    vsids.attach(c);
}

void detach(clause c)
{
    random.detach(c);
    vsids.detach(c);
}

template&lt;class Solver&gt;
void conflict(Solver &amp;s)
{
    random.conflict(s);
    vsids.conflict(s);
}</programlisting>
			</section>

			<section>
				<title>Implementing the decision heuristic proper</title>
				<para>With the code from the previous sections already in place, the last missing piece is the function that gets called by the solver when it is about to make a new decision. For this purpose, we overload <literal>operator()</literal> for our class and define it in terms of our two members <literal>random</literal> and <literal>vsids</literal> (which also overload <literal>operator()</literal>). It is really quite straightforward:</para>
				<programlisting>template&lt;class Solver&gt;
unsigned int operator()(Solver &amp;s)
{
    /* Make a random decision 10% of the time */
    if (s.random() % 100 &lt; 10)
        return random();

    return vsids();
}</programlisting>
				<para>If you paid attention, you might have noticed the call to <literal>s.random()</literal>. Here we are in fact making a reference to another designated plugin &mdash; the solver thread's random number generator. The solver parameter that gets passed to our <literal>operator()</literal> is guaranteed to have a member <literal>random</literal> that also supports <literal>operator()</literal>.</para>
				<para>With this, our plugin is complete.</para>
			</section>

			<section>
				<title>Using the plugin</title>

				<para>In order to actually use the new decision heuristic plugin, we need to pass it to the solver somehow. The easiest way to do this is to modify the file <filename>main.cc</filename> in the top-level directory. The file <filename>main.cc</filename> is a <emphasis>program</emphasis> that makes use of the <application>satxx11</application> <emphasis>library</emphasis>. You are supposed to modify the former, but not the latter. (If you do want to change some part of the library, you can of course just go ahead and do it. The intention, however, is that whenever you want to implement a new heuristic, you should <emphasis>extend</emphasis> the library rather than modify it.)</para>
				<para>With those few words of warning, let's include the new plugin:</para>
				<programlisting>#include "my_decision.hh"</programlisting>
				<para>Now we need to modify the definition of <literal>my_solver</literal> at the top of <literal>main()</literal>:</para>
				<programlisting>typedef solver&lt;reason&gt; my_solver;</programlisting>
				<para>We need to change this definition to use our new plugin instead of the default decision heuristic plugin. Now, since C++ sadly doesn't support named template parameters, we actually need to substitute this rather small definition with a somewhat verbose one. Let's first look at the default parameters that are defined in <filename>include/satxx11/solver.hh</filename>, it should look something like this:</para>
				<programlisting>template&lt;class ReasonType,
    class Random = std::ranlux24_base,
    class Valuation = valuation_compact,
    class Stack = stack_default,
    class Decide = decide_cached_polarity&lt;decide_vsids&lt;95&gt;&gt;,
    class Propagate = propagate_list&lt;propagate_binary_clause, propagate_clause&lt;&gt;&gt;,
    class Analyze = analyze_1uip&lt;minimise_minisat&gt;,
    class Send = send_size&lt;4&gt;,
    class Receive = receive_all,
    class NextRestart = restart_multiply&lt;restart_luby, restart_fixed&lt;400&gt;&gt;,
    class Reduce = reduce_size&lt;2&gt;,
    class Simplify = simplify_list&lt;simplify_failed_literal_probing&gt;,
    class Plugin = plugin_list&lt;plugin_stdio&gt;&gt;
class solver {</programlisting>
				<para>We therefore supply the new definition of <literal>my_solver</literal> to mimic these settings, at least until the parameter of the decision heuristic plugin, with the exception of using our new plugin instead of <literal>decide_vsids</literal>:</para>
				<programlisting>typedef solver&lt;reason,
    std::ranlux24_base,
    valuation_compact,
    stack_default,
    decide_cached_polarity&lt;my_decide&gt;&gt; my_solver;</programlisting>
			<para>And that's it. You should now be able to compile the solver as usual and enjoy 10% random decisions!</para>
			</section>
		</chapter>
	</part>

	<part id="builtins">
		<title>Built-in plugins</title>

		<chapter>
			<title>Branching literal heuristics</title>

			<section>
				<title><literal>decide_cached_polarity</literal></title>
				<para>TODO</para>
			</section>
		</chapter>

		<chapter>
			<title>Branching variable heuristics</title>

			<section>
				<title><literal>decide_vsids</literal></title>
				<para>TODO</para>
			</section>

			<section>
				<title><literal>decide_random</literal></title>
				<para>TODO</para>
			</section>
		</chapter>

		<chapter>
			<title>Propagation engines</title>

			<section>
				<title><literal>propagate_watchlists</literal></title>
				<para>TODO</para>
			</section>
		</chapter>

		<chapter>
			<title>Conflict analysis engines</title>

			<section>
				<title><literal>analyze_1uip</literal></title>
				<para>TODO</para>
			</section>
		</chapter>

		<chapter>
			<title>Conflict clause minimisation engines</title>

			<section>
				<title><literal>minimise_minisat</literal></title>
				<para>TODO</para>
			</section>
			<section>
				<title><literal>minimise_noop</literal></title>
				<para>TODO</para>
			</section>
		</chapter>

		<chapter>
			<title>Clause sharing heuristics</title>

			<section>
				<title><literal>send_size</literal></title>
				<para>TODO</para>
			</section>

			<section>
				<title><literal>receive_all</literal></title>
				<para>TODO</para>
			</section>
		</chapter>

		<chapter>
			<title>Restart heuristics</title>

			<section>
				<title><literal>restart_luby</literal></title>
				<para>TODO</para>
			</section>
			<section>
				<title><literal>restart_geometric</literal></title>
				<para>TODO</para>
			</section>
			<section>
				<title><literal>restart_random</literal></title>
				<para>TODO</para>
			</section>
			<section>
				<title><literal>restart_fixed</literal></title>
				<para>TODO</para>
			</section>
			<section>
				<title><literal>restart_multiply</literal></title>
				<para>TODO</para>
			</section>
		</chapter>

		<chapter>
			<title>Clause removal heuristics</title>

			<section>
				<title><literal>reduce_noop</literal></title>
				<para>TODO</para>
			</section>
			<section>
				<title><literal>reduce_size</literal></title>
				<para>TODO</para>
			</section>
		</chapter>

		<chapter>
			<title>Simplification schemes</title>

			<section>
				<title><literal>simplify_failed_literal_probing</literal></title>
				<para>TODO</para>
			</section>
			<section>
				<title><literal>simplify_list</literal></title>
				<para>TODO</para>
			</section>
		</chapter>

		<chapter>
			<title>Generic plugins</title>

			<section>
				<title><literal>plugin_base</literal></title>

				<section>
					<title>Synopsis</title>
					<para><code>plugin_base</code></para>
				</section>

				<section>
					<title>Description</title>
					<para>The <literal>plugin_base</literal> plugin is not meant to do anything by itself; instead, it provides empty implementations of all the event handlers for generic plugins so that other plugins do not need to provide their own empty implementations of unused event handlers.</para>
				</section>
			</section>
			<section>
				<title><literal>plugin_list</literal></title>

				<section>
					<title>Synopsis</title>
					<para><code>plugin_list&lt;plugin1, plugin2, ...&gt;</code></para>
				</section>

				<section>
					<title>Description</title>
					<para>The <literal>plugin_list</literal> plugin dispatches all events to the plugins <code>plugin1</code>, <code>plugin2</code>, etc. If the list of plugins is empty, this plugin is effectively a no-op.</para>
				</section>
			</section>
			<section>
				<title><literal>plugin_stdio</literal></title>
				<para>TODO</para>
			</section>
			<section>
				<title><literal>plugin_graphviz</literal></title>

				<section>
					<title>Synopsis</title>
					<para><code>plugin_graphviz&lt;bool show_implications = false&gt;</code></para>
				</section>

				<section>
					<title>Description</title>
					<para>The <literal>plugin_graphviz</literal> plugin constructs a <application>GraphViz</application> graph, written to the files <filename>graph-0.dot</filename>, <filename>graph-1.dot</filename>, etc. (where 0, 1, etc. are the thread indices).</para>
					<para>To plot the <filename>.dot</filename> files, use the <command>dot</command> command like this:</para>
					<para><userinput>dot -Tpdf &lt; graph-0.dot &gt; graph-0.pdf</userinput></para>
				</section>

				<section>
					<title>Example</title>
					<figure>
						<title>Example GraphViz output</title>
						<graphic fileref="graph.png" />
					</figure>
				</section>
			</section>
		</chapter>
	</part>
</book>
